# Workflow to build a custom kernel

name: kbuild

env:
  UPSTREAM: gregkh/linux
  BRANCH: linux-5.10.y

on:
  push:
  pull_request:
  schedule:
  - cron: "32 2 1,15 * 5"
  workflow_dispatch:

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      UPSTREAM_COMMIT: ${{ env.UPSTREAM_COMMIT }}

    steps:
    - name: Checkout kconfig source
      uses: actions/checkout@v2
      with:
        # Need full history to merge
        fetch-depth: 0

    - name: get upstream commit
      run: |
        UPSTREAM_COMMIT=$(git ls-remote $GITHUB_SERVER_URL/$UPSTREAM | awk '$2 == "refs/heads/'"$BRANCH"'"{print$1}')
        echo UPSTREAM_COMMIT="${UPSTREAM_COMMIT}" | tee -a "$GITHUB_ENV"

    - name: cache kernel
      uses: actions/cache@v2
      with:
        path: linux-stable/.git
        key: linux-${{ env.UPSTREAM }}-${{ env.UPSTREAM_COMMIT }}
        restore-keys: |
          linux-${{ env.UPSTREAM }}-

    - name: Checkout upstream source
      uses: actions/checkout@v2
      with:
        repository: ${{ env.UPSTREAM }}
        ref: ${{ env.BRANCH }}
        path: linux-stable
        # Need full history to merge
        fetch-depth: 0

    - name: Merge the two unrelated branches
      run: |
        git fetch linux-stable
        git config user.name github-actions
        git config user.email github-actions@github.com
        git merge --no-stat --allow-unrelated-histories -X ours -m "Merge $BRANCH" FETCH_HEAD

    - name: Generate full kernel config
      run: ./config

    - name: Upload generated config
      uses: actions/upload-artifact@v2
      with:
        name: config
        path: .config
        if-no-files-found: error

    - name: diffconfig
      run: |
        cp .config 0xdc.config
        make defconfig
        ./scripts/diffconfig -m .config 0xdc.config | tee 0xdc_diff.config

    - name: Upload diffconfig
      uses: actions/upload-artifact@v2
      with:
        name: diffconfig
        path: 0xdc_diff.config

  check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout kconfig source
      uses: actions/checkout@v2
      with:
        # Need full history to merge
        fetch-depth: 0

    - name: cache kernel
      uses: actions/cache@v2
      with:
        path: linux-stable/.git
        key: linux-${{ env.UPSTREAM }}
        restore-keys: linux-

    - name: Checkout upstream source
      uses: actions/checkout@v2
      with:
        repository: ${{ env.UPSTREAM }}
        ref: ${{ env.BRANCH }}
        path: linux-stable
        # Need full history to merge
        fetch-depth: 0

    - name: Merge the two unrelated branches
      run: |
        git fetch linux-stable
        git config user.name github-actions
        git config user.email github-actions@github.com
        git merge --no-stat --allow-unrelated-histories -X ours -m "Merge $BRANCH" FETCH_HEAD

    - name: Check kernel options
      run: ./check

  build:
    # build requires the full config
    needs: config
    runs-on: ubuntu-latest

    steps:
    - name: restore cache
      uses: actions/cache@v2
      with:
        path: .git
        key: linux-${{ env.UPSTREAM }}-${{ needs.config.outputs.UPSTREAM_COMMIT }}
        restore-keys: |
          linux-${{ env.UPSTREAM }}-

    - name: Checkout upstream source
      uses: actions/checkout@v2
      with:
        repository: ${{ env.UPSTREAM }}
        ref: ${{ env.BRANCH }}
        fetch-depth: 0

    - name: Download full config
      uses: actions/download-artifact@v2
      with:
        name: config

    - name: Build the kernel
      uses: docker://applehq/gentoo-stage4
      with:
        args: make -j3 tar-pkg

    - name: status and diff
      run: |
        git remote -v
        git --no-pager status
        git --no-pager diff
        make kernelversion
        make kernelrelease
        git describe

    - name: Upload compiled kernel binaries
      uses: actions/upload-artifact@v2
      with:
        name: kernel-install
        if-no-files-found: error
        # Ignore the non-compressed kernel
        path: |
          tar-install/
          !tar-install/boot/vmlinux*
